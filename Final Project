# This Project highlights my proficiency in writing complex queries, optimizing performance, and managing data effectively.



#1. Which song is included in the most playlists and how may playlists is it in?;
SELECT t.Name AS SongName
,ar.Name AS ArtistName
,COUNT(p.Playlistid) AS playlistCount
FROM chinook.tracks t
JOIN chinook.playlist_track p ON t.TrackId = p.TrackId
JOIN chinook.albums al ON t.Albumid = al.Albumid 
JOIN chinook.artists ar ON al.Artistid = ar.Artistid
GROUP BY t.Name, ar.Name
ORDER BY playlistCount DESC
LIMIT 1;

#2. How much Revenue did each Track bring in?;
SELECT t.name
,SUM(Quantity)
,Sum(Total) as TotalInvoiced
FROM chinook.tracks t
JOIN chinook.invoice_items ii ON ii.TrackId = t.TrackId
JOIN chinook.invoices i ON i.InvoiceId - ii.InvoiceId
Group BY t.TrackId
ORDER BY TotalInvoiced DESC;

#3. What Genre of music did each Sales Person sell the most of?;
WITH EmployeeGenreSales AS (
SELECT e.EmployeeId
,e.FirstName AS EmployeeFirstName
,e.LastName AS EmployeeLastName
,g.GenreId
,g.Name AS GenreName
,SUM(ii.Quantity) AS TotalQuantitySold
FROM employees e
JOIN customers c ON e.EmployeeId = c.SupportRepId
JOIN invoices i ON c.CustomerId = i.CustomerId
JOIN invoice_items ii ON i.InvoiceId = ii.InvoiceId
JOIN tracks t ON ii.TrackId = t.TrackId
JOIN genres g ON t.GenreId = g.GenreId
GROUP BY e.EmployeeId, e.FirstName, e.LastName, g.GenreId, g.Name
)
SELECT es.EmployeeFirstName
,es.EmployeeLastName
,es.GenreName
,es.TotalQuantitySold
FROM EmployeeGenreSales es
JOIN (SELECT 
EmployeeId, 
MAX(TotalQuantitySold) AS MaxQuantity
FROM EmployeeGenreSales
GROUP BY EmployeeId) max_sales
ON es.EmployeeId = max_sales.EmployeeId AND es.TotalQuantitySold = max_sales.MaxQuantity
ORDER BY es.EmployeeLastName, es.EmployeeFirstName;


#4. How many years since the employee Hire Date did each employee make their first sale?;
WITH YearDifference AS(
SELECT e.FirstName AS EmployeeFirstName
,e.LastName AS EmployeeLastName
,SUM(Quantity)
,HireDate
,InvoiceDate
,(InvoiceDate - HireDate) AS YearsSinceSale
FROM employees e
JOIN customers c ON c.SupportRepId = e.EmployeeId
JOIN invoices i ON i.CustomerId = c.CustomerId
JOIN invoice_items ii ON ii.InvoiceId = i.InvoiceId
GROUP BY YearsSinceSale, EmployeeFirstName, EmployeeLastName
ORDER BY EmployeeFirstName, EmployeeLastName, YearsSinceSale
)
SELECT EmployeeFirstName
,EmployeeLastName
,MIN(YearsSinceSale) AS YearsSinceFirstSale
FROM YearDifference
GROUP BY EmployeeFirstname, EmployeeLastName
ORDER BY YearsSinceFirstSale
;

#5. Show Customers 
SELECT CustomerId
,FirstName
,LastName
, Country
FROM chinook.customers
WHERE Country<> 'USA'
AND Country IS NOT NULL;

#6. Show only the Customers from Brazil.
SELECT CustomerId
,FirstName
,LastName
, Country
FROM chinook.customers
WHERE Country = 'Brazil';

#7. Find the Invoices of customers who are from Brazil. 
SELECT CustomerId
,FirstName
,LastName
,InvoiceId
,InvoiceDate
,BillingCountry
FROM chinook.customers c
JOIN chinook.invoices i ON i.CustomerId = c.CustomerId
WHERE BillingCountry = 'Brazil';

#8. Show the Employees who are Sales Agents.
SELECT FirstName
,LastName
,Title
FROM chinook.employees
WHERE Title LIKE 'Sales %';

#9. Find a unique/distinct list of billing countries from the Invoice table.
SELECT DISTINCT BillingCountry
FROM chinook.invoices
WHERE BillingCountry IS NOT NULL
ORDER BY BillingCountry;

#10. Provide a query that shows the invoices associated with each sales agent. 
SELECT e.FirstName
,e.LastName
,InvoiceId
FROM chinook.employees e
JOIN chinook.customers c ON e.EmployeeId = c.SupportRepId
JOIN chinook.invoices i ON i.CustomerId = c.CustomerId
ORDER BY e.LastName, InvoiceId;

#11. Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.
SELECT c.FirstName AS CustomerFirstName
,c.LastName AS CustomerLastName
,e.FirstName AS RepFirstName
,e.LastName AS RepLastName
,BillingCountry
,InvoiceId
,Total AS InvoiceTotal
FROM chinook.invoices i
LEFT JOIN chinook.customers c ON i.CustomerId = c.CustomerId
LEFT JOIN chinook.employees e ON e.EmployeeId = c.SupportRepId
ORDER BY RepLastName, CustomerLastName, InvoiceId;


#12. How many Invoices were there in 2009?
SELECT COUNT(InvoiceId) AS TotalInvoices
FROM chinook.invoices
WHERE InvoiceDate LIKE '2009%'

#13. Write a query that includes the purchased track name with each invoice line ID.
SELECT SUM(Total) AS TotalSales
FROM chinook.invoices
WHERE InvoiceDate LIKE '2009%'

#14. Write a query that includes the purchased track name AND artist name with each invoice line ID.
SELECT InvoiceLineId
,Name AS SongName
FROM chinook.invoice_items it
JOIN chinook.tracks t ON t.TrackId = it.TrackId
ORDER BY InvoiceLineId;

#15. Write a query that includes the purchased track name AND artist name with each invoice line ID.
SELECT InvoiceLineId AS InvoiceId
,Name AS PurchasedSongName
,ar.Name AS ArtistName
FROM chinook.invoice_items it
JOIN chinook.tracks t ON t.TrackId = it.TrackId
JOIN chinook.albums al ON al.AlbumId = t.AlbumId
JOIN chinook.artists ar ON ar.ArtistId = al.ArtistId
ORDER BY InvoiceLineId;

#16. Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.
SELECT t.Name AS Tracks
,Title AS AlbumName
,g.Name AS Genre
,m.Name AS MediaType
FROM chinook.tracks t
JOIN chinook.albums al ON al.AlbumId = t.AlbumId
JOIN chinook.genres g ON g.GenreId = t.Genreid
JOIN chinook.media_types m ON m.MediaTypeId = t.MediaTypeId
ORDER BY Tracks;

#17. Show the total sales made by each sales agent.
SELECT e.FirstName
,e.LastName
,SUM(Total) as TotalSales
FROM chinook.employees e
JOIN chinook.customers c ON e.EmployeeId = c.SupportRepId
JOIN chinook.invoices i ON i.CustomerId = c.CustomerId
GROUP BY e.FirstName, e.LastName
ORDER BY TotalSales DESC;

#18. Which sales agent made the most dollars in sales in 2009?
SELECT FirstName
,LastName
,MAX(TotalSales) AS TopSales
FROM(
SELECT e.FirstName
,e.LastName
,SUM(Total) AS TotalSales
FROM chinook.employees e
JOIN chinook.customers c ON e.EmployeeId = c.SupportRepId
JOIN chinook.invoices i ON i.CustomerId = c.CustomerId
GROUP BY e.FirstName, e.LastName);
